% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_Sig.R
\name{gen_Sig}
\alias{gen_Sig}
\title{Generate trading signals based on technical indicators (tibble output)}
\usage{
gen_Sig(
  indicator_data,
  method = c("threshold", "crossover", "comparison"),
  col1,
  col2 = NULL,
  threshold = NULL,
  threshold_type = c("above", "below", "outside"),
  append = TRUE,
  signal_name = "Signal"
)
}
\arguments{
\item{indicator_data}{Tibble or data frame containing technical indicator columns}

\item{method}{Character specifying signal generation method: "threshold", "crossover", or "comparison"}

\item{col1}{Character vector of column names or numeric vector of indices for the first set of columns}

\item{col2}{Character vector of column names or numeric vector of indices for the second set of columns (for crossover/comparison)}

\item{threshold}{Numeric threshold value (required for "threshold" method)}

\item{threshold_type}{Character specifying threshold type: "above", "below", or "outside"}

\item{append}{Logical indicating whether to append signals to the original data (default TRUE)}

\item{signal_name}{Character specifying the name of the signal column (default "Signal")}
}
\value{
Tibble with trading signals added or standalone signal tibble
}
\description{
This function generates trading signals (-1, 0, 1) based on specified columns
of a technical indicator matrix, returning tibble format for consistent data handling.
Supports column parameters as vectors for flexible column selection.
}
\examples{
\dontrun{
# Example usage with tibble output
kdj_tibble <- add_kdj(TSLA)
signal_tibble <- gen_Sig(kdj_tibble, method = "crossover", col1 = "K", col2 = "D")
class(signal_tibble) # Should return "tbl_df", "tbl", "data.frame"
}
}
